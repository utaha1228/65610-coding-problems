

# This file was *autogenerated* from the file sol.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_165 = Integer(165)
exec(open("output.txt").read())

Zq = GF(q)
R = PolynomialRing(Zq, names=('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8',)); (x1, x2, x3, x4, x5, x6, x7, x8,) = R._first_ngens(8)
s = vector(R, [x1, x2, x3, x4, x5, x6, x7, x8])
A = matrix(R, A)
u = vector(R, u)
e = u - A * s 

equations = [(e[i] - _sage_const_1 ) * e[i] * (e[i] + _sage_const_1 ) for i in range(len(e))]
monomials = equations[_sage_const_0 ].monomials()
assert len(monomials) == _sage_const_165   # 11 choose 3, includes constant term

M = []
v = []
for eq in equations:
	row = [eq.monomial_coefficient(mon) for mon in monomials if mon != _sage_const_1 ]
	M.append(row)
	v.append(-eq.monomial_coefficient(R(_sage_const_1 )))

M = matrix(Zq, M)
v = vector(Zq, v)

monomial_values = M.solve_right(v)

mp = {}
for mon, val in zip(monomials, monomial_values):
	mp[mon] = val

s = [int(mp[var]) for var in s]
print(s)


